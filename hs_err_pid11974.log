#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 182452224 bytes for committing reserved memory.
# Possible reasons:
#   The system is out of physical RAM or swap space
#   The process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap
# Possible solutions:
#   Reduce memory load on the system
#   Increase physical memory or swap space
#   Check if swap backing store is full
#   Decrease Java heap size (-Xmx/-Xms)
#   Decrease number of Java threads
#   Decrease Java thread stack sizes (-Xss)
#   Set larger code cache with -XX:ReservedCodeCacheSize=
#   JVM is running with Unscaled Compressed Oops mode in which the Java heap is
#     placed in the first 4GB address space. The Java Heap base address is the
#     maximum limit for the native heap growth. Please use -XX:HeapBaseMinAddress
#     to set the Java Heap base and to place the Java Heap above 4GB virtual address.
# This output file may be truncated or incomplete.
#
#  Out of Memory Error (os_linux.cpp:2839), pid=11974, tid=11985
#
# JRE version: OpenJDK Runtime Environment (11.0.5+10) (build 11.0.5+10-post-Ubuntu-0ubuntu1.118.04)
# Java VM: OpenJDK 64-Bit Server VM (11.0.5+10-post-Ubuntu-0ubuntu1.118.04, mixed mode, sharing, tiered, compressed oops, g1 gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport %p %s %c %d %P" (or dumping to /home/walid/Desktop/angular_spring/commerce/core.11974)
#

---------------  S U M M A R Y ------------

Command Line: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=35187 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=localhost -Dspring.jmx.enabled=true -Dspring.application.admin.enabled=true -Djava.security.egd=file:/dev/./urandom -Xverify:none -XX:TieredStopAtLevel=1 -Dfile.encoding=UTF-8 com.project.commerce.CommerceApplication --spring.output.ansi.enabled=always

Host: Intel(R) Core(TM) i7-4720HQ CPU @ 2.60GHz, 8 cores, 7G, Ubuntu 18.04.3 LTS
Time: Sat Jan 18 10:31:55 2020 CET elapsed time: 102182 seconds (1d 4h 23m 2s)

---------------  T H R E A D  ---------------

Current thread (0x00007f116011f000):  VMThread "VM Thread" [stack: 0x00007f1140180000,0x00007f1140280000] [id=11985]

Stack: [0x00007f1140180000,0x00007f1140280000],  sp=0x00007f114027dff0,  free space=1015k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)



[timeout occurred during error reporting in step "printing native stack"] after 95 s.
VM_Operation (0x00007f10ba9ee820): G1CollectForAllocation, mode: safepoint, requested by thread 0x00007f10bc004000


---------------  P R O C E S S  ---------------

Threads class SMR info:
_java_thread_list=0x00007f10e0004d40, length=32, elements={
0x00007f1160122000, 0x00007f1160124000, 0x00007f116012a800, 0x00007f116012c800,
